{"version":3,"sources":["components/drawer.component.js","components/algorithm-list.js","components/insertion_sort.js","components/merge_sort.js","components/quick_sort.js","components/bubble_sort.js","components/mainbody.component.js","App.js","reportWebVitals.js","index.js"],"names":["ResponsiveDrawer","props","children","React","mobileOpen","setMobileOpen","handleDrawerToggle","selectedIndex","setSelectedIndex","handleListItemClick","event","index","drawer","Toolbar","Divider","List","ListItemButton","component","Link","selected","to","style","textDecoration","onClick","ListItemText","primary","Box","sx","display","CssBaseline","AppBar","width","position","zIndex","theme","IconButton","color","edge","mr","sm","Button","Typography","variant","noWrap","flexShrink","Drawer","open","onClose","ModalProps","keepMounted","xs","boxSizing","flexGrow","p","AlgorithmList","updateData","bind","getData","state","name","description","this","data","setState","axios","get","then","res","textAlign","Component","InsertionSortComponent","useState","setData","useEffect","className","best_case","average_case","worst_case","MergeSortComponent","QuickSortComponent","BubbleSortComponent","MainBody","information","path","exact","createTheme","typography","h2","fontSize","palette","main","purple","secondary","yellow","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f47fcdc2.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport { IconButton, Drawer, Divider, AppBar, Box, CssBaseline,\r\n    List, ListItemButton, ListItemIcon, ListItemText, Toolbar, Typography, Button\r\n    } from '@mui/material';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst drawerWidth = 240;\r\n\r\n\r\n\r\nfunction ResponsiveDrawer(props) {\r\n    const { children } = props;\r\n    const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n    const handleDrawerToggle = () => {\r\n        setMobileOpen(!mobileOpen);\r\n    };\r\n\r\n    const [selectedIndex, setSelectedIndex] = React.useState(-1);\r\n\r\n    const handleListItemClick = (event, index) => {\r\n      setSelectedIndex(index);\r\n    };\r\n\r\n    const drawer = (\r\n        <div>\r\n            <Toolbar/>\r\n            <Divider />\r\n            <List>\r\n                <ListItemButton component={Link} selected={selectedIndex === 0}\r\n                    to=\"/insertion_sort\" style={{ textDecoration: 'none' }}\r\n                    onClick={(event) => handleListItemClick(event, 0)}\r\n                >\r\n                    <ListItemText primary=\"Insertion Sort\"/>\r\n                </ListItemButton>\r\n\r\n                <ListItemButton component={Link} selected={selectedIndex === 1}\r\n                    to=\"/merge_sort\" style={{ textDecoration: 'none' }}\r\n                    onClick={(event) => handleListItemClick(event, 1)}\r\n                >\r\n                        <ListItemText primary=\"Merge Sort\"/>\r\n                </ListItemButton>\r\n\r\n                <ListItemButton component={Link} selected={selectedIndex === 2}\r\n                    to=\"/bubble_sort\" style={{ textDecoration: 'none' }}\r\n                    onClick={(event) => handleListItemClick(event, 2)}\r\n                >\r\n                        <ListItemText primary=\"Bubble Sort\"/>\r\n                </ListItemButton>\r\n\r\n                <ListItemButton component={Link} selected={selectedIndex === 3}\r\n                    to=\"/quick_sort\" style={{ textDecoration: 'none' }}\r\n                    onClick={(event) => handleListItemClick(event, 3)}\r\n                >\r\n                        <ListItemText primary=\"Quick Sort\"/>\r\n                </ListItemButton>\r\n\r\n            </List>\r\n        </div>\r\n    );\r\n\r\n\r\n\r\n    return (\r\n        <Box sx={{ display: 'flex' }}>\r\n            <CssBaseline />\r\n            <AppBar\r\n                sx={{\r\n                width: '100%',\r\n                position: \"fixed\",\r\n                zIndex:  (theme) => theme.zIndex.drawer + 1\r\n                }}\r\n            >\r\n                <Toolbar>\r\n                   <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        edge=\"start\"\r\n                        onClick={handleDrawerToggle}\r\n                        sx={{ mr: 2, display: { sm: 'none' } }}\r\n                    >\r\n                    <MenuIcon />\r\n                    </IconButton>\r\n                    <Button component={Link} color=\"inherit\" onClick={(event) => handleListItemClick(event, -1)}\r\n                        to=\"/\" style={{ textDecoration: 'none' }}\r\n                    >\r\n                        <Typography component=\"div\" variant=\"h6\" noWrap >\r\n                            Algorithms\r\n                        </Typography>\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Box\r\n                component=\"nav\"\r\n                sx={{ width: { sm: drawerWidth }, flexShrink: { sm: 0 } }}\r\n                aria-label=\"mailbox folders\"\r\n            >\r\n                {/* ### The mobile (aka small) version of the drawer ### */}\r\n                <Drawer\r\n                variant=\"temporary\"\r\n                open={mobileOpen}\r\n                onClose={handleDrawerToggle}\r\n                ModalProps={{\r\n                    keepMounted: true, // Better open performance on mobile.\r\n                }}\r\n                sx={{\r\n                    display: { xs: 'block', sm: 'none' },\r\n                    '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\r\n                }}\r\n                >\r\n                    {drawer}\r\n                </Drawer>\r\n                {/* ### The desktop (aka large) version of the drawer ### */}\r\n                <Drawer\r\n                variant=\"permanent\"\r\n                sx={{\r\n                    display: { xs: 'none', sm: 'block' }, flexShrink: 0,\r\n                    '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\r\n                }}\r\n                open\r\n                >\r\n                    {drawer}\r\n                </Drawer>\r\n            </Box>\r\n\r\n            <Box component=\"main\" sx={{ flexGrow: 1, p: 3 }}>\r\n                <Toolbar />\r\n\r\n                { children }\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default ResponsiveDrawer;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class AlgorithmList extends Component{\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.updateData = this.updateData.bind(this);\r\n    this.getData = this.getData.bind(this);\r\n\r\n    this.state = {\r\n      name: \"\",\r\n      description: \"\",\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getData();\r\n  }\r\n\r\n  updateData(data){\r\n    this.setState({\r\n      name: data.name,\r\n      description: data.description,\r\n    })\r\n  }\r\n\r\n  getData(){\r\n    axios.get('http://localhost:5000/algorithms')\r\n      .then(res => {\r\n        this.updateData(res.data[0]);\r\n      })\r\n  }\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h3 style={{textAlign: \"center\"}}>\r\n          {this.state.name} <br/> {this.state.description}\r\n          </h3>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, {Component, useState, useEffect} from 'react';\r\nimport \"fontsource-roboto\";\r\nimport axios from 'axios';\r\n\r\nfunction InsertionSortComponent(props){\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  });\r\n\r\n  function getData(){\r\n    axios.get('http://localhost:5000/algorithms')\r\n      .then(res => {\r\n        setData(res.data[1]);\r\n      })\r\n  }\r\n\r\n  function insertion_sort(A){\r\n    for(let i = 1; i < A.length; i++){\r\n      let key = A[i];\r\n      let j = i - 1;\r\n      while(j >= 0 && A[j] > key){\r\n        A[j + 1] = A[j];\r\n        j = j - 1;\r\n      }\r\n      A[j + 1] = key\r\n    }\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <div className = \"container\">\r\n        <h3 style={{textAlign: \"center\"}}> Data Received: </h3>\r\n        <ul>\r\n          <li> {data.name} </li>\r\n          <li> <p> {data.description} </p> </li>\r\n          <li> {data.best_case} </li>\r\n          <li> {data.average_case} </li>\r\n          <li> {data.worst_case} </li>\r\n         </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n//TODO: connect graphics to insertion_sort function.\r\n//Could use react spring for the animations.\r\n//General method for connection:\r\n//1. Start button on screen to signal animation start.\r\n//2. Run operation of insertion_sort.\r\n//  2a. Animation should show which element is being sorted (different color)\r\n//  2b. Elements that are being compared to the element being sorted should be another color.\r\n//  2c. Swap elements.\r\n//3. Repeat until insertion_sort is done.\r\n\r\n//To simplify things, we could just add in an animation, loop it, and explain\r\n//what's happening. We would do this with small datasets.\r\n//We will do the above method for large datasets (1000+ numbers);\r\n//However, I'm predicting that we will run into lag issues. Not sure how we will fix that.\r\n\r\n\r\nexport default InsertionSortComponent;\r\n","import React, {Component, useState, useEffect} from 'react';\r\nimport \"fontsource-roboto\";\r\nimport axios from 'axios';\r\n\r\nfunction MergeSortComponent(props){\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  });\r\n\r\n  function getData(){\r\n    axios.get('http://localhost:5000/algorithms')\r\n      .then(res => {\r\n        setData(res.data[0]);\r\n      })\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <div className = \"container\">\r\n        <h3 style={{textAlign: \"center\"}}> Data Received: </h3>\r\n        <ul>\r\n          <li> {data.name} </li>\r\n          <li> <p> {data.description} </p> </li>\r\n          <li> {data.best_case} </li>\r\n          <li> {data.average_case} </li>\r\n          <li> {data.worst_case} </li>\r\n         </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n//TODO: connect graphics to insertion_sort function.\r\n//Could use react spring for the animations.\r\n//General method for connection:\r\n//1. Start button on screen to signal animation start.\r\n//2. Run operation of insertion_sort.\r\n//  2a. Animation should show which element is being sorted (different color)\r\n//  2b. Elements that are being compared to the element being sorted should be another color.\r\n//  2c. Swap elements.\r\n//3. Repeat until insertion_sort is done.\r\n\r\n//To simplify things, we could just add in an animation, loop it, and explain\r\n//what's happening. We would do this with small datasets.\r\n//We will do the above method for large datasets (1000+ numbers);\r\n//However, I'm predicting that we will run into lag issues. Not sure how we will fix that.\r\n\r\n\r\nexport default MergeSortComponent;\r\n","import React, {Component, useState, useEffect} from 'react';\r\nimport \"fontsource-roboto\";\r\nimport axios from 'axios';\r\n\r\nfunction QuickSortComponent(props){\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  });\r\n\r\n  function getData(){\r\n    axios.get('http://localhost:5000/algorithms')\r\n      .then(res => {\r\n        setData(res.data[2]);\r\n      })\r\n  }\r\n\r\n\r\n  return(\r\n    <div>\r\n      <div className = \"container\">\r\n        <h3 style={{textAlign: \"center\"}}> Data Received: </h3>\r\n        <ul>\r\n          <li> {data.name} </li>\r\n          <li> <p> {data.description} </p> </li>\r\n          <li> {data.best_case} </li>\r\n          <li> {data.average_case} </li>\r\n          <li> {data.worst_case} </li>\r\n         </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n//TODO: connect graphics to insertion_sort function.\r\n//Could use react spring for the animations.\r\n//General method for connection:\r\n//1. Start button on screen to signal animation start.\r\n//2. Run operation of insertion_sort.\r\n//  2a. Animation should show which element is being sorted (different color)\r\n//  2b. Elements that are being compared to the element being sorted should be another color.\r\n//  2c. Swap elements.\r\n//3. Repeat until insertion_sort is done.\r\n\r\n//To simplify things, we could just add in an animation, loop it, and explain\r\n//what's happening. We would do this with small datasets.\r\n//We will do the above method for large datasets (1000+ numbers);\r\n//However, I'm predicting that we will run into lag issues. Not sure how we will fix that.\r\n\r\n\r\nexport default QuickSortComponent;\r\n","import React, {Component, useState, useEffect} from 'react';\r\nimport \"fontsource-roboto\";\r\nimport axios from 'axios';\r\n\r\nfunction BubbleSortComponent(props){\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  });\r\n\r\n  function getData(){\r\n    axios.get('http://localhost:5000/algorithms')\r\n      .then(res => {\r\n        setData(res.data[3]);\r\n      })\r\n  }\r\n\r\n\r\n  return(\r\n    <div>\r\n      <div className = \"container\">\r\n        <h3 style={{textAlign: \"center\"}}> Data Received: </h3>\r\n        <ul>\r\n          <li> {data.name} </li>\r\n          <li> <p> {data.description} </p> </li>\r\n          <li> {data.best_case} </li>\r\n          <li> {data.average_case} </li>\r\n          <li> {data.worst_case} </li>\r\n         </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n//TODO: connect graphics to insertion_sort function.\r\n//Could use react spring for the animations.\r\n//General method for connection:\r\n//1. Start button on screen to signal animation start.\r\n//2. Run operation of insertion_sort.\r\n//  2a. Animation should show which element is being sorted (different color)\r\n//  2b. Elements that are being compared to the element being sorted should be another color.\r\n//  2c. Swap elements.\r\n//3. Repeat until insertion_sort is done.\r\n\r\n//To simplify things, we could just add in an animation, loop it, and explain\r\n//what's happening. We would do this with small datasets.\r\n//We will do the above method for large datasets (1000+ numbers);\r\n//However, I'm predicting that we will run into lag issues. Not sure how we will fix that.\r\n\r\n\r\nexport default BubbleSortComponent;\r\n","import { React, Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport AlgorithmList from \"./algorithm-list.js\"\r\nimport InsertionSortComponent from \"./insertion_sort.js\"\r\nimport MergeSortComponent from \"./merge_sort.js\"\r\nimport QuickSortComponent from \"./quick_sort.js\"\r\nimport BubbleSortComponent from \"./bubble_sort.js\"\r\n\r\nexport default class MainBody extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            information: 'main'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Switch>\r\n                <Route path=\"/insertion_sort\" component = {InsertionSortComponent} />\r\n                <Route path=\"/merge_sort\" component = {MergeSortComponent} />\r\n                <Route path=\"/quick_sort\" component = {QuickSortComponent} />\r\n                <Route path=\"/bubble_sort\" component = {BubbleSortComponent} />\r\n                <Route path=\"/\" exact component = {AlgorithmList} />\r\n                </Switch>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport \"fontsource-roboto\";\r\nimport {BrowserRouter as Router} from \"react-router-dom\"\r\nimport {createTheme} from '@mui/material';\r\nimport { purple, yellow } from '@mui/material/colors';\r\nimport './App.css';\r\nimport ResponsiveDrawer from \"./components/drawer.component\";\r\nimport MainBody from './components/mainbody.component';\r\n\r\nconst theme = createTheme({\r\n  typography: {\r\n      h2: {\r\n        fontSize: 36\r\n      }\r\n  },\r\n  palette: {\r\n    primary: {\r\n      main: purple[400],\r\n    },\r\n    secondary: {\r\n      main: yellow[200],\r\n    }\r\n  }\r\n})\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <ResponsiveDrawer>\r\n        <MainBody>\r\n\r\n        </MainBody>\r\n      </ResponsiveDrawer>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nrender(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}